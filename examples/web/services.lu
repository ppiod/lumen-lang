module examples.web.services exposing (createUser);

use net.http (Response, json);
use json (parse);
use string;
use hash;
use examples.web.types (User, Message);
use examples.web.db (addUser);

let userFromJson = fn(jsonData: Hash<String, String>) -> Result<User, String> {
  let name = match hash.get(jsonData, "name") {
    Ok(v) => Ok(v),
    Err(_) => Err("Field 'name' is required.")
  }?;
  
  let role = match hash.get(jsonData, "role") {
    Ok(v) => Ok(v),
    Err(_) => Err("Field 'role' is required.")
  }?;

  Ok(User(name, role))
};

let createUser = fn(body: String) -> Result<Any, Response> {
  let jsonData = match parse(body) {
    Ok(data) => Ok(data),
    Err(msg) => Err(Response(400, strFormat("Bad Request: Invalid JSON - {?}", msg), {}))
  }?;

  let newUser = match userFromJson(jsonData) {
    Ok(user) => Ok(user),
    Err(msg) => Err(Response(400, strFormat("Bad Request: {?}", msg), {}))
  }?;
  
  let newId = addUser(newUser);
  
  let successMessage = newUser.name
    |> string.toUpper()
    |> (name) => strFormat("User '{?}' created successfully", name);
    
  let successResponse = json(Message(successMessage, newId));
  Ok(successResponse)
};