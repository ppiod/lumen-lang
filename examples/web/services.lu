module examples.web.services exposing (createUser, handleUserUpdate, handleDelete);

use net.http (Response, json);
use json (parse);
use string;
use hash;
use examples.web.db (UserRepository, User, Message);

let getRequiredField = fn(data: Hash<String, Any>, field: String) -> Result<String, String> {
    match hash.get(data, field) {
        Ok(value) => Ok(strFormat("{?}", value)),
        Err(_) => Err(strFormat("Field '{?}' is required.", field))
    }
};

let userFromJson = fn(jsonData: Hash<String, Any>) -> Result<User, String> {
  let name = getRequiredField(jsonData, "name")?;
  let role = getRequiredField(jsonData, "role")?;
  Ok(User(name, role))
};

let processBodyToUser = fn(body: String) -> Result<User, Response> {
    parse(body)
        |> (result) => match result {
            Ok(data) => userFromJson(data),
            Err(msg) => Err(strFormat("Bad Request: Invalid JSON - {?}", msg))
        }
        |> (result) => match result {
            Ok(user) => Ok(user),
            Err(msg) => Err(Response(400, strFormat("Bad Request: {?}", msg), {}))
        }
};

let createUser = fn<T: UserRepository>(repo: T, body: String) -> Result<Response, Response> {
  let newUser = processBodyToUser(body)?;
  match repo.create(newUser) {
      Ok(newId) => Ok(
        json(Message(
          strFormat("User '{?}' created successfully", newUser.name), 
          strFormat("{?}", newId)
        ))
      ),
      Err(e) => Err(Response(500, strFormat("Database Error: {?}", e), {}))
  }
};

let handleUserUpdate = fn<T: UserRepository>(repo: T, id: String, body: String) -> Result<Response, Response> {
    let updatedUser = processBodyToUser(body)?;
    match repo.update(id, updatedUser) {
        Ok(_) => Ok(json(Message("User updated successfully", id))),
        Err(msg) => Err(Response(404, strFormat("Error: {?}", msg), {}))
    }
};

let handleDelete = fn<T: UserRepository>(repo: T, id: String) -> Response {
    match repo.delete(id) {
        Ok(_) => Response(204, "", {}),
        Err(msg) => Response(404, strFormat("Error: {?}", msg), {})
    }
};